<?xml version='1.0' encoding='UTF-8'?>
<glyph name="x" format="2">
  <advance width="1024"/>
  <unicode hex="0078"/>
  <outline>
    <contour>
      <point x="15" y="0" type="line"/>
      <point x="403" y="552" type="line"/>
      <point x="44" y="1062" type="line"/>
      <point x="269" y="1062" type="line"/>
      <point x="432" y="813" type="line"/>
      <point x="478" y="742"/>
      <point x="506" y="694" type="qcurve"/>
      <point x="550" y="760"/>
      <point x="587" y="811" type="qcurve"/>
      <point x="766" y="1062" type="line"/>
      <point x="981" y="1062" type="line"/>
      <point x="614" y="562" type="line"/>
      <point x="1009" y="0" type="line"/>
      <point x="788" y="0" type="line"/>
      <point x="570" y="330" type="line"/>
      <point x="512" y="419" type="line"/>
      <point x="233" y="0" type="line"/>
    </contour>
  </outline>
  <lib>
    <dict>
      <key>public.truetype.instructions</key>
      <dict>
        <key>assembly</key>
        <string>
PUSHB[ ]	/* 2 values pushed */
2 2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
IF[ ]	/* If */
  NPUSHB[ ]	/* 21 values pushed */
  15 1 11 6 4 2 9 6 2 6 13 10 0 10 15 24 15 15 2 85 15
  MDAP[1]	/* MoveDirectAbsPt */
  CALL[ ]	/* CallFunction */
  SVTCA[0]	/* SetFPVectorToAxis */
  MIAP[1]	/* MoveIndirectAbsPt */
  MIAP[1]	/* MoveIndirectAbsPt */
  MIAP[1]	/* MoveIndirectAbsPt */
  MIAP[1]	/* MoveIndirectAbsPt */
  SRP1[ ]	/* SetRefPoint1 */
  SLOOP[ ]	/* SetLoopVariable */
  IP[ ]	/* InterpolatePts */
  IUP[1]	/* InterpolateUntPts */
  IUP[0]	/* InterpolateUntPts */
ELSE[ ]	/* Else */
  PUSHB[ ]	/* 8 values pushed */
  15 18 1 15 34 25 57 6
  PUSHW[ ]	/* 1 value pushed */
  -34
  NPUSHB[ ]	/* 80 values pushed */
  25 57 90 15 150 4 150 8 153 14 154 15 192 5 192 6 192 7 203 15 9 15 64 22 57 26 3 19 9 21 13 26 16 53 1 58 11 129 1 142 11 8 47 18 87 4 89 7 89 11 88 14 151 1 152 10 152 11 183 2 184 12 200 11 202 14 204 16 218 3 213 9 209 13 219 16 229 10 18 18
  PUSHB[ ]	/* 2 values pushed */
  6 2
  RS[ ]	/* ReadStore */
  EQ[ ]	/* Equal */
  IF[ ]	/* If */
    NPUSHB[ ]	/* 11 values pushed */
    12 0 18 17 15 24 13 16 6 85 6
    PUSHW[ ]	/* 1 value pushed */
    -24
    NPUSHB[ ]	/* 14 values pushed */
    13 16 6 85 15 6 0 2 13 0 10 10 2 6
    SVTCA[0]	/* SetFPVectorToAxis */
    MIAP[1]	/* MoveIndirectAbsPt */
    ALIGNRP[ ]	/* AlignRelativePt */
    MIAP[1]	/* MoveIndirectAbsPt */
    ALIGNRP[ ]	/* AlignRelativePt */
    SRP1[ ]	/* SetRefPoint1 */
    SRP2[ ]	/* SetRefPoint2 */
    IP[ ]	/* InterpolatePts */
    IP[ ]	/* InterpolatePts */
    CALL[ ]	/* CallFunction */
    CALL[ ]	/* CallFunction */
    SVTCA[1]	/* SetFPVectorToAxis */
    SRP1[ ]	/* SetRefPoint1 */
    SRP2[ ]	/* SetRefPoint2 */
    IP[ ]	/* InterpolatePts */
    IP[ ]	/* InterpolatePts */
  ELSE[ ]	/* Else */
    NPUSHB[ ]	/* 102 values pushed */
    6 6 3 7 8 9 9 1 6 6 9 5 4 3 3 11 15 15 16 14 13 13 1 15 15 13 16 11 1 0 9 2 13 11 3 12 16 10 6 15 2 15 10 16 198 0 198 9 2 16 37 0 9 20 0 0 9 3 2 13 198 13 1 13 37 12 3 20 12 12 3 10 9 9 3 3 2 6 16 13 13 12 12 0 10 79 18 1 18 73 13 126 12 34 10 15 97 6 9 126 64 10
    PUSHW[ ]	/* 1 value pushed */
    283
    PUSHB[ ]	/* 8 values pushed */
    64 6 80 6 128 6 3 6
    PUSHW[ ]	/* 1 value pushed */
    579
    NPUSHB[ ]	/* 14 values pushed */
    32 3 126 2 34 79 0 1 0 73 17 124 196 24
    CALL[ ]	/* CallFunction */
    SRP0[ ]	/* SetRefPoint0 */
    MIRP[10110]	/* MoveIndirectRelPt */
    DELTAP1[ ]	/* DeltaExceptionP1 */
    MIRP[10100]	/* MoveIndirectRelPt */
    MIRP[01101]	/* MoveIndirectRelPt */
    SMD[ ]	/* SetMinimumDistance */
    RTHG[ ]	/* RoundToHalfGrid */
    MIRP[11101]	/* MoveIndirectRelPt */
    DELTAP1[ ]	/* DeltaExceptionP1 */
    MIRP[11101]	/* MoveIndirectRelPt */
    SMD[ ]	/* SetMinimumDistance */
    RTG[ ]	/* RoundToGrid */
    MIRP[01101]	/* MoveIndirectRelPt */
    SRP0[ ]	/* SetRefPoint0 */
    MIRP[00101]	/* MoveIndirectRelPt */
    SRP0[ ]	/* SetRefPoint0 */
    MIRP[10100]	/* MoveIndirectRelPt */
    MIRP[01101]	/* MoveIndirectRelPt */
    MIRP[00110]	/* MoveIndirectRelPt */
    DELTAP1[ ]	/* DeltaExceptionP1 */
    SVTCA[0]	/* SetFPVectorToAxis */
    MIAP[1]	/* MoveIndirectAbsPt */
    ALIGNRP[ ]	/* AlignRelativePt */
    SRP0[ ]	/* SetRefPoint0 */
    ALIGNRP[ ]	/* AlignRelativePt */
    SRP0[ ]	/* SetRefPoint0 */
    ALIGNRP[ ]	/* AlignRelativePt */
    MIAP[1]	/* MoveIndirectAbsPt */
    ALIGNRP[ ]	/* AlignRelativePt */
    SRP0[ ]	/* SetRefPoint0 */
    ALIGNRP[ ]	/* AlignRelativePt */
    SRP0[ ]	/* SetRefPoint0 */
    ALIGNRP[ ]	/* AlignRelativePt */
    SDPVTL[1]	/* SetDualPVectorToLine */
    SFVTCA[1]	/* SetFVectorToAxis */
    MDAP[0]	/* MoveDirectAbsPt */
    CALL[ ]	/* CallFunction */
    DELTAP1[ ]	/* DeltaExceptionP1 */
    SDPVTL[1]	/* SetDualPVectorToLine */
    RDTG[ ]	/* RoundDownToGrid */
    MDRP[00100]	/* MoveDirectRelPt */
    SDPVTL[1]	/* SetDualPVectorToLine */
    MDAP[0]	/* MoveDirectAbsPt */
    RTG[ ]	/* RoundToGrid */
    CALL[ ]	/* CallFunction */
    DELTAP1[ ]	/* DeltaExceptionP1 */
    RDTG[ ]	/* RoundDownToGrid */
    SRP0[ ]	/* SetRefPoint0 */
    MDRP[00100]	/* MoveDirectRelPt */
    SVTCA[0]	/* SetFPVectorToAxis */
    SRP1[ ]	/* SetRefPoint1 */
    SRP2[ ]	/* SetRefPoint2 */
    IP[ ]	/* InterpolatePts */
    IP[ ]	/* InterpolatePts */
    ISECT[ ]	/* MovePtToIntersect */
    ISECT[ ]	/* MovePtToIntersect */
    SDPVTL[1]	/* SetDualPVectorToLine */
    SFVTL[0]	/* SetFVectorToLine */
    MDRP[00100]	/* MoveDirectRelPt */
    SDPVTL[1]	/* SetDualPVectorToLine */
    SFVTPV[ ]	/* SetFVectorToPVector */
    SRP0[ ]	/* SetRefPoint0 */
    MDRP[00100]	/* MoveDirectRelPt */
    SFVTL[0]	/* SetFVectorToLine */
    MDRP[00100]	/* MoveDirectRelPt */
    SDPVTL[1]	/* SetDualPVectorToLine */
    SFVTPV[ ]	/* SetFVectorToPVector */
    SRP0[ ]	/* SetRefPoint0 */
    MDRP[00100]	/* MoveDirectRelPt */
    MDRP[00100]	/* MoveDirectRelPt */
    SFVTL[0]	/* SetFVectorToLine */
    MDRP[00100]	/* MoveDirectRelPt */
    SPVTL[1]	/* SetPVectorToLine */
    SFVTPV[ ]	/* SetFVectorToPVector */
    SRP0[ ]	/* SetRefPoint0 */
    ALIGNRP[ ]	/* AlignRelativePt */
    ALIGNRP[ ]	/* AlignRelativePt */
    SFVTL[0]	/* SetFVectorToLine */
    ALIGNRP[ ]	/* AlignRelativePt */
  EIF[ ]	/* EndIf */
  IUP[1]	/* InterpolateUntPts */
  IUP[0]	/* InterpolateUntPts */
  SVTCA[1]	/* SetFPVectorToAxis */
  RS[ ]	/* ReadStore */
  NOT[ ]	/* LogicalNot */
  IF[ ]	/* If */
    PUSHB[ ]	/* 5 values pushed */
    14 24 29 57 11
    PUSHW[ ]	/* 1 value pushed */
    -34
    NPUSHB[ ]	/* 11 values pushed */
    29 57 12 34 23 57 3 34 23 57 11
    PUSHW[ ]	/* 1 value pushed */
    -34
    PUSHB[ ]	/* 3 values pushed */
    33 57 16
    PUSHW[ ]	/* 1 value pushed */
    -64
    NPUSHB[ ]	/* 10 values pushed */
    21 57 1 34 33 57 9 64 28 57
    CALL[ ]	/* CallFunction */
    CALL[ ]	/* CallFunction */
    CALL[ ]	/* CallFunction */
    CALL[ ]	/* CallFunction */
    CALL[ ]	/* CallFunction */
    CALL[ ]	/* CallFunction */
    CALL[ ]	/* CallFunction */
    CALL[ ]	/* CallFunction */
  EIF[ ]	/* EndIf */
  DELTAP1[ ]	/* DeltaExceptionP1 */
  DELTAP2[ ]	/* DeltaExceptionP2 */
  SVTCA[0]	/* SetFPVectorToAxis */
  CALL[ ]	/* CallFunction */
  DELTAP1[ ]	/* DeltaExceptionP1 */
  CALL[ ]	/* CallFunction */
  CALL[ ]	/* CallFunction */
  SVTCA[1]	/* SetFPVectorToAxis */
  DELTAP1[ ]	/* DeltaExceptionP1 */
EIF[ ]	/* EndIf */
</string>
        <key>formatVersion</key>
        <string>1</string>
        <key>id</key>
        <string>98563889db48e43be3e10cea3bfe70b3711a2a5934dfb163306dfeb89e8657d684ec582c03bd3adf4fc22f13abdc0f630360a1ac70dbd6c6283917db07699832</string>
      </dict>
    </dict>
  </lib>
</glyph>
