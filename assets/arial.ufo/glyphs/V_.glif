<?xml version='1.0' encoding='UTF-8'?>
<glyph name="V" format="2">
  <advance width="1366"/>
  <unicode hex="0056"/>
  <outline>
    <contour>
      <point x="577" y="0" type="line"/>
      <point x="9" y="1466" type="line"/>
      <point x="219" y="1466" type="line"/>
      <point x="600" y="401" type="line"/>
      <point x="646" y="273"/>
      <point x="677" y="161" type="qcurve"/>
      <point x="711" y="281"/>
      <point x="756" y="401" type="qcurve"/>
      <point x="1152" y="1466" type="line"/>
      <point x="1350" y="1466" type="line"/>
      <point x="776" y="0" type="line"/>
    </contour>
  </outline>
  <lib>
    <dict>
      <key>public.truetype.instructions</key>
      <dict>
        <key>assembly</key>
        <string>
PUSHB[ ]	/* 2 values pushed */
2 2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
IF[ ]	/* If */
  NPUSHB[ ]	/* 18 values pushed */
  5 1 0 8 2 1 2 0 8 10 0 5 9 8 5 1 2 5
  MDAP[1]	/* MoveDirectAbsPt */
  MDRP[11101]	/* MoveDirectRelPt */
  MDRP[01101]	/* MoveDirectRelPt */
  SRP0[ ]	/* SetRefPoint0 */
  MDRP[11101]	/* MoveDirectRelPt */
  MDRP[01101]	/* MoveDirectRelPt */
  SRP1[ ]	/* SetRefPoint1 */
  SHP[1]	/* ShiftPointByLastPoint */
  SHP[1]	/* ShiftPointByLastPoint */
  SVTCA[0]	/* SetFPVectorToAxis */
  MIAP[1]	/* MoveIndirectAbsPt */
  MIAP[1]	/* MoveIndirectAbsPt */
  MIAP[1]	/* MoveIndirectAbsPt */
  SRP1[ ]	/* SetRefPoint1 */
  SRP2[ ]	/* SetRefPoint2 */
  IP[ ]	/* InterpolatePts */
  IUP[1]	/* InterpolateUntPts */
  IUP[0]	/* InterpolateUntPts */
ELSE[ ]	/* Else */
  NPUSHB[ ]	/* 36 values pushed */
  47 5 1 42 0 40 3 37 10 47 12 48 12 96 12 137 8 137 9 144 12 192 12 240 12 11 32 12 80 12 2 4 2 11 8 2
  PUSHB[ ]	/* 2 values pushed */
  6 2
  RS[ ]	/* ReadStore */
  EQ[ ]	/* Equal */
  IF[ ]	/* If */
    PUSHB[ ]	/* 8 values pushed */
    9 1 12 11 0 8 1 2
    SVTCA[0]	/* SetFPVectorToAxis */
    MIAP[1]	/* MoveIndirectAbsPt */
    MIAP[1]	/* MoveIndirectAbsPt */
    SVTCA[1]	/* SetFPVectorToAxis */
    SRP1[ ]	/* SetRefPoint1 */
    SRP2[ ]	/* SetRefPoint2 */
    IP[ ]	/* InterpolatePts */
    IP[ ]	/* InterpolatePts */
  ELSE[ ]	/* Else */
    NPUSHB[ ]	/* 36 values pushed */
    10 9 9 32 8 5 20 8 8 5 0 1 1 32 2 5 20 2 2 5 9 1 2 5 233 32 10 0 8 9 101 8 1 101 2 8
    PUSHW[ ]	/* 1 value pushed */
    -64
    NPUSHB[ ]	/* 11 values pushed */
    40 57 80 8 1 128 8 144 8 2 8
    PUSHW[ ]	/* 1 value pushed */
    257
    NPUSHB[ ]	/* 13 values pushed */
    2 64 40 57 95 2 1 143 2 159 2 2 2
    PUSHW[ ]	/* 1 value pushed */
    257
    NPUSHB[ ]	/* 17 values pushed */
    32 5 80 5 2 48 5 96 5 144 5 192 5 240 5 5 5
    PUSHW[ ]	/* 1 value pushed */
    648
    PUSHB[ ]	/* 4 values pushed */
    11 96 168 24
    CALL[ ]	/* CallFunction */
    RTHG[ ]	/* RoundToHalfGrid */
    SRP0[ ]	/* SetRefPoint0 */
    MIRP[10100]	/* MoveIndirectRelPt */
    DELTAP1[ ]	/* DeltaExceptionP1 */
    DELTAP2[ ]	/* DeltaExceptionP2 */
    MIRP[00100]	/* MoveIndirectRelPt */
    DELTAP1[ ]	/* DeltaExceptionP1 */
    DELTAP2[ ]	/* DeltaExceptionP2 */
    CALL[ ]	/* CallFunction */
    MIRP[00100]	/* MoveIndirectRelPt */
    DELTAP1[ ]	/* DeltaExceptionP1 */
    DELTAP2[ ]	/* DeltaExceptionP2 */
    CALL[ ]	/* CallFunction */
    RTG[ ]	/* RoundToGrid */
    SRP0[ ]	/* SetRefPoint0 */
    MIRP[01101]	/* MoveIndirectRelPt */
    SRP0[ ]	/* SetRefPoint0 */
    MIRP[01101]	/* MoveIndirectRelPt */
    SVTCA[0]	/* SetFPVectorToAxis */
    MIAP[1]	/* MoveIndirectAbsPt */
    ALIGNRP[ ]	/* AlignRelativePt */
    SMD[ ]	/* SetMinimumDistance */
    RTHG[ ]	/* RoundToHalfGrid */
    MIRP[01101]	/* MoveIndirectRelPt */
    RTG[ ]	/* RoundToGrid */
    MIAP[1]	/* MoveIndirectAbsPt */
    ALIGNRP[ ]	/* AlignRelativePt */
    SDPVTL[1]	/* SetDualPVectorToLine */
    SFVTCA[1]	/* SetFVectorToAxis */
    MDAP[0]	/* MoveDirectAbsPt */
    CALL[ ]	/* CallFunction */
    RDTG[ ]	/* RoundDownToGrid */
    SRP0[ ]	/* SetRefPoint0 */
    MDRP[00100]	/* MoveDirectRelPt */
    SDPVTL[1]	/* SetDualPVectorToLine */
    MDAP[0]	/* MoveDirectAbsPt */
    RTG[ ]	/* RoundToGrid */
    CALL[ ]	/* CallFunction */
    RDTG[ ]	/* RoundDownToGrid */
    SRP0[ ]	/* SetRefPoint0 */
    MDRP[00100]	/* MoveDirectRelPt */
    SVTCA[1]	/* SetFPVectorToAxis */
    MPPEM[ ]	/* MeasurePixelPerEm */
    PUSHB[ ]	/* 1 value pushed */
    11
    GTEQ[ ]	/* GreaterThanOrEqual */
    MPPEM[ ]	/* MeasurePixelPerEm */
    PUSHB[ ]	/* 1 value pushed */
    20
    LTEQ[ ]	/* LessThenOrEqual */
    AND[ ]	/* LogicalAnd */
    IF[ ]	/* If */
      PUSHB[ ]	/* 3 values pushed */
      0 15 10
      PUSHW[ ]	/* 1 value pushed */
      -15
      PUSHB[ ]	/* 3 values pushed */
      9 18 1
      PUSHW[ ]	/* 1 value pushed */
      -15
      PUSHB[ ]	/* 3 values pushed */
      8 20 2
      PUSHW[ ]	/* 1 value pushed */
      -18
      SHPIX[ ]	/* ShiftZoneByPixel */
      SHPIX[ ]	/* ShiftZoneByPixel */
      SHPIX[ ]	/* ShiftZoneByPixel */
      SHPIX[ ]	/* ShiftZoneByPixel */
      SHPIX[ ]	/* ShiftZoneByPixel */
      SHPIX[ ]	/* ShiftZoneByPixel */
    EIF[ ]	/* EndIf */
    SVTCA[1]	/* SetFPVectorToAxis */
    MPPEM[ ]	/* MeasurePixelPerEm */
    PUSHB[ ]	/* 1 value pushed */
    40
    GTEQ[ ]	/* GreaterThanOrEqual */
    MPPEM[ ]	/* MeasurePixelPerEm */
    PUSHB[ ]	/* 1 value pushed */
    54
    LTEQ[ ]	/* LessThenOrEqual */
    AND[ ]	/* LogicalAnd */
    IF[ ]	/* If */
      PUSHW[ ]	/* 2 values pushed */
      0 -64
      SHPIX[ ]	/* ShiftZoneByPixel */
    EIF[ ]	/* EndIf */
  EIF[ ]	/* EndIf */
  IUP[1]	/* InterpolateUntPts */
  IUP[0]	/* InterpolateUntPts */
  SVTCA[1]	/* SetFPVectorToAxis */
  DELTAP1[ ]	/* DeltaExceptionP1 */
  DELTAP2[ ]	/* DeltaExceptionP2 */
  DELTAP1[ ]	/* DeltaExceptionP1 */
  SVTCA[0]	/* SetFPVectorToAxis */
  DELTAP1[ ]	/* DeltaExceptionP1 */
EIF[ ]	/* EndIf */
</string>
        <key>formatVersion</key>
        <string>1</string>
        <key>id</key>
        <string>w1366l577+0l9+1466l219+1466l600+401o646+273q677+161o711+281q756+401l1152+1466l1350+1466l776+0|</string>
      </dict>
    </dict>
  </lib>
</glyph>
